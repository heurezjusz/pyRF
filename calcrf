#!/usr/bin/python3


import config

# parsing arguments
import argparse
parser = argparse.ArgumentParser()

parser.add_argument('files', type=str, nargs='+',
        help='names of files with data')

args = parser.parse_args()


# program itself
from utils import theoretical_azimuth, deconvolve, output_filename
from obspy import read
from obspy.core.utcdatetime import UTCDateTime
from obspy.core.stream import Stream
import numpy as np

theoretical = (theoretical_azimuth(config.SLOWNESS, 1.3))



for datafile in vars(args)['files']:
    # reading file
    data = read(datafile)
    data = data.slice(UTCDateTime('2007-07-16T01:25:18'), UTCDateTime('2007-07-16T01:27:03'))
    if config.PLOT_DATA_FROM_FILE: data.plot()

    # rotating
    data = data.rotate('ZNE->LQT', config.AZIMUTH, theoretical)
    data = data.filter('bandpass', freqmin=config.FREQMIN, freqmax=config.FREQMAX)
    if config.SAVE_ROTATED:
        data.write(output_filename(datafile, prefix='rotated_'), config.SAVE_FORMAT)
    if config.PLOT_ROTATED: data.plot()
    
    # dec3 195, 300, 0.1, 1

    if config.NORMALIZE:
        maxes = data.max()
        for i in range(len(maxes)):
            data.traces[i].data /= maxes[i]
    
    stL = data.select(component='L')
    stQ = data.select(component='Q')
    stT = data.select(component='T')

    print("deconvolution...")
    RFtraces = deconvolve([stQ.traces[0].data, stT.traces[0].data], stL.traces[0].data)
    if config.REVERSE_QRF: RFtraces[0] = -RFtraces[0]
    if config.REVERSE_TRF: RFtraces[1] = -RFtraces[1]
    stQ.traces[0].data = RFtraces[0]
    stT.traces[0].data = RFtraces[1]

    data = Stream(stQ.traces + stT.traces)
    if config.SAVE_RF:
        data.write(output_filename(datafile, prefix='rf_'), config.SAVE_FORMAT)
    data.plot()
