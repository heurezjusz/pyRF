#!/usr/bin/python3


from config import *

# parsing arguments
import argparse
parser = argparse.ArgumentParser()

parser.add_argument('files', type=str, nargs='+',
        help='names of files with data')

args = parser.parse_args()


# program itself
from utils import theoretical_azimuth, deconvolve
from obspy import read
from obspy.core.utcdatetime import UTCDateTime
from obspy.core.stream import Stream
import numpy as np

theoretical = (theoretical_azimuth(SLOWNESS, 1.3))

for datafile in vars(args)['files']:
    data = read(datafile)
    data = data.slice(UTCDateTime('2007-07-16T01:25:00'), UTCDateTime('2007-07-16T01:28:00'))
    data.plot()
    data = data.rotate('ZNE->LQT', AZIMUTH, theoretical)
    data = data.filter('bandpass', freqmin=FREQMIN, freqmax=FREQMAX)
    #data.plot()
    #1 / 0

    print(data)
    
    # dec3 195, 300, 0.1, 1

    if ARG4 == -1 or True:
        maxes = data.max()
        for i in range(len(maxes)):
            data.traces[i].data /= maxes[i]
    
    stL = data.select(component='L')
    stQ = data.select(component='Q')
    stT = data.select(component='T')

    print("deconvolution...")
    RFtraces = deconvolve([stQ.traces[0].data, stT.traces[0].data], stL.traces[0].data)

    stQ.traces[0].data = RFtraces[0]
    stT.traces[0].data = RFtraces[1]
#    stQ.traces[0].data, _ = np.asarray(deconvolve(stQ.traces[0].data, stL.traces[0].data))
#    stT.traces[0].data, _ = np.asarray(deconvolve(stT.traces[0].data, stL.traces[0].data))

    print(stQ.traces[0].stats.channel)
    print(stQ)
    print(stQ.traces)
    print(stQ.traces[0].data)

    data = Stream(stQ.traces + stT.traces)
    
    data.plot()
